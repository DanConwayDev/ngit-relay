map $http_upgrade $is_ws {
    default          0;
    "~*^websocket$"  1;
}

server {
    listen 8081;
    server_name _;  # Catch-all for any domain

    # if you turn logging on, make sure to add logrotate or similar
    # error_log  /var/log/ngit-relay/nginx-error.log debug;
    # access_log /var/log/ngit-relay/nginx-access.log;

    # Serve Git repositories
    location ~ ^/npub1([a-z0-9]+)/([^/]+\.git)(/.*)?$ {
        # allow pushes larger than 1mb
        client_max_body_size          1G;      # accept pushes up to 2 GB
        client_body_buffer_size       512k;    # buffer before writing to /tmp
        fastcgi_request_buffering     off;     # stream request body directly to fcgiwrap
        fastcgi_read_timeout          900;     # seconds – 15 min is plenty
        # Enable CORS
        add_header 'Access-Control-Allow-Origin' '*';  # Allow all origins
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';  # Allowed methods
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';  # Allowed headers
        add_header 'Access-Control-Expose-Headers' '*';  # Expose headers
        # route to git-http-backend
        fastcgi_pass  unix:/var/run/fcgiwrap.socket;
        include       fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /usr/libexec/git-core/git-http-backend;
        fastcgi_param GIT_HTTP_EXPORT_ALL "";
        fastcgi_param GIT_PROJECT_ROOT /srv/ngit-relay/repos;
        fastcgi_param PATH_INFO /npub1$1/$2$3;
    }

    location = / {
        # hand WebSocket–upgrade requests to the proxy
        if ($is_ws) {
            return 418;
        }
        # NIP-11 header for relay document request
        if ($http_accept ~* "application/nostr\+json") {
            return 418; 
        }
        # Serve "/" to /srv/ngit-relay/static/index.html
        root /srv/ngit-relay/static/;
        try_files /index.html = 404;
    }
    error_page 418 = @proxy;

    # send everything else that isn't in static to proxy
    location / {
        root /srv/ngit-relay/static;
        # serve the file if it exists, otherwise hand the request to @proxy
        try_files $uri $uri/ @proxy;
    }

    # # Proxy to khatru relay and blossom server
    location @proxy {
        # Enable CORS
        # useful for checking - npx blossom-audit audit http://localhost:8081 bitcoin --sec nsec1l9z9xem0s96paxa3kvk6vadgev0vm0rq6hl8e5wgmj6h0ustsh2qz3sntn
        add_header 'Access-Control-Allow-Origin' '*';  # Allow all origins
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';  # Allowed methods
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With';  # Specify allowed headers
        add_header 'Access-Control-Expose-Headers' '*';  # Expose headers        fastcgi_pass  unix:/var/run/fcgiwrap.socket;
        add_header 'Access-Control-Expose-Headers' 'Authorization, Content-Type';  # Expose headers to the browser
        add_header 'Access-Control-Max-Age' '86400';  # Cache preflight response for 1 day

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With';  # Specify allowed headers
            add_header 'Access-Control-Expose-Headers' '*';  # Expose headers to the browser
            add_header 'Access-Control-Max-Age' '86400';  # Cache preflight response for 1 day
            add_header 'Content-Length' 0;
            return 204;  # No content response
        }

        # proxy traffic to khatru port
        proxy_pass http://localhost:3334;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

         # Handle WebSocket connections
        proxy_http_version 1.1;  # Use HTTP/1.1 for WebSocket
        proxy_set_header Upgrade $http_upgrade;  # Upgrade header
        proxy_set_header Connection "upgrade";  # Connection header
    }
}
